@{
    Layout = "~/Views/Shared/_MinimalLayout2.cshtml";
}

@model EnrollmentSystemUCB.Models.AddEnrollmentHeader


<style>
    .rounded-square {
        border: 1px solid #ccc; /* Light border */
        border-radius: 15px; /* Rounded corners */
        background-color: #f9f9f9; /* Light background color */
        padding: 20px; /* Padding inside the square */
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Subtle shadow */
    }

    .modal {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 1000; /* Sit on top */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgb(0,0,0); /* Fallback color */
        background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
    }

    .modal-dialog {
        margin: 15% auto; /* 15% from the top and centered */
        max-width: 500px; /* Max width of the modal */
    }

    .modal-header {
        border-bottom: none;
    }

    .modal-footer {
        border-top: none;
    }

    .modal-title {
        margin: 0;
        font-size: 1.25rem;
    }

    .modal-body {
        text-align: center; /* Center the text */
    }

    .table-container {
        max-height: 160px; /* Adjust this height to fit three rows */
        overflow-y: auto; /* Enable vertical scrolling */
        border: 1px solid #ccc; /* Optional: add a border for better visibility */
    }

    #subjectScheduleTable {
        width: 100%; /* Make the table take the full width of the container */
        border-collapse: collapse; /* Optional: collapse borders for a cleaner look */
    }

        #subjectScheduleTable th,
        #subjectScheduleTable td {
            border: 1px solid #ccc; /* Optional: add borders for table cells */
            padding: 8px; /* Add padding for better readability */
            text-align: left; /* Align text to the left */
        }
</style>

<!-- Modal for Notifications -->
<div id="notificationModal" class="modal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Notification</h5>
                <button type="button" class="close" onclick="closeModal()">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p id="modalMessage">This subject already exists. Please check the EDP code.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="closeModal()">Close</button>
            </div>
        </div>
    </div>
</div>

<form method="post" class="rounded-square">
    <h1 class="text-center">ENROLL HERE!</h1>

    <!-- STUDENT INFORMATION -->
    <div class="rounded-square mb-4 p-3">
        <p>Student Information</p>
        <div class="form-floating mb-sm-3">
            <input asp-for="Id" type="text" class="form-control" id="studentId" required readonly>
            <label>ID Number:</label>
            <input type="hidden" name="Id" value="@ViewData["StudentId"]" />
        </div>
        <div class="row">
            <div class="col-md-4">
                <!-- Student Name -->
                <div class="form-floating mb-sm-3">
                    <label for="studentName">Student Name</label>
                    <input type="text" id="studentName" value="@ViewData["StudentName"]" readonly />
                </div>
            </div>
            <div class="col-md-4">
                <!-- Student Course -->
                <div class="form-floating mb-sm-3">
                    <label for="studentYear">Student Year</label>
                    <input type="text" id="studentYear" value="@ViewData["StudentYear"]" readonly />
                </div>
            </div>
            <div class="col-md-4">
                <!-- Student Year -->
                <div class="form-floating mb-sm-3">
                    <label for="studentCourse">Student Course</label>
                    <input type="text" id="studentCourse" value="@ViewData["StudentCourse"]" readonly />
                </div>
            </div>
        </div>
    </div>

    <!-- AVAILABLE SUBJECTS -->
    <div class="rounded-square mb-4 p-3">
        <p class="col-md-4">Available Subjects</p>
        <div class="table-container">
            <table id="subjectScheduleTable">
                <thead>
                    <tr>
                        <th>EDP Code</th>
                        <th>Subject Code</th>
                        <th>Days</th>
                        <th>Time Start</th>
                        <th>Time End</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Rows will be dynamically populated here -->
                </tbody>
            </table>
        </div>
        <p class="col-md-2">Add Subject</p>

        <!-- ADD SUBJECT -->
        <div class="row">
            <div class="col-md-4">
                <!-- EDP Code -->
                <div class="form-floating mb-sm-3">
                    <input type="text" id="edpCode" class="form-control">
                    <label>EDP Code:</label>
                </div>
            </div>
            <div class="col-md-4">
                <!-- Subject Code -->
                <div class="form-floating mb-sm-3">
                    <input type="text" class="form-control" id="subjectCode" readonly>
                    <label>Subject Code:</label>
                </div>
            </div>
            <div class="col-md-4 d-flex justify-content-center align-items-center">
                <button class="btn btn-primary" type="button" onclick="addSubject()" id="addSubjectButton">Add Subject</button>
            </div>
        </div>
    </div>

    <!-- TABLE FOR ENROLLED SUBJECTS -->
    <div class="rounded-square mb-4 p-3">
        <h3 class="text-center mt-4">Subjects to Enroll</h3>
        <table id="table" class="table table-bordered mt-3 text-center">
            <thead>
                <tr>
                    <th>EDP Code</th>
                    <th>Subject Code</th>
                    <th>Days</th>
                    <th>Time Start</th>
                    <th>Time End</th>
                    <th>Units</th>
                    <th>REMOVE SUBJECT</th>
                </tr>
            </thead>
            <tbody id="subjectTableBody">
                <!-- Rows will be added dynamically here -->
            </tbody>
        </table>

        <!-- OTHERS -->
        <div class="row">
            <div class="col-md-4">
                <!-- ENCODER -->
                <div class="form-floating mb-sm-3">
                    <input asp-for="Encoder" type="text" class="form-control" required>
                    <label>Encoder:</label>
                </div>
            </div>
            <div class="col-md-4">
                <!-- Total Units -->
                <div class="form-floating mb-sm-3">
                    <input asp-for="TotalUnits" type="text" id="totalUnits" class="form-control" readonly>
                    <label>Total Units:</label>
                </div>
            </div>
            <div class="col-md-4 d-flex justify-content-center align-items-center">
                <!-- ENROLL BUTTON -->
                <button id="enrolledButton" class="btn btn-primary align-content-center" type="submit">ENROLL</button>
            </div>
        </div>
    </div>
</form>

<script>
    document.getElementById("edpCode").addEventListener("input", function () {
        var edpCode = this.value;

        if (edpCode.length > 0) {
            fetch(`/Enrollment/GetSubjecttCodeByEDP?edp=${edpCode}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        document.getElementById("subjectCode").value = data.code;
                    } else {
                        document.getElementById("subjectCode").value = "";
                    }
                })
                .catch(error => console.error("Error fetching subject code:", error));
        } else {
            document.getElementById("subjectCode").value = "";
        }
    });
</script>

<script>
    function calculateTotalUnits() {
        let totalUnits = 0;
        const tableBody = document.getElementById("subjectTableBody");
        const rows = tableBody.getElementsByTagName("tr");

        // Loop through each row in the table body
        for (let i = 0; i < rows.length; i++) {
            const cells = rows[i].getElementsByTagName("td");
            const unitsCell = cells[5]; // Assuming units are in the 6th column (index 5)
            if (unitsCell) {
                const units = parseInt(unitsCell.innerText, 10); // Convert units to an integer
                if (!isNaN(units)) {
                    totalUnits += units; // Add to total
                }
            }
        }

        // Update the readonly field
        document.getElementById("totalUnits").value = totalUnits; // Set the total units in the readonly field

        // Check if total units exceed or reach the maximum
        if (totalUnits >= 27) {
            document.getElementById("addSubjectButton").disabled = true; // Disable the button
            showModal("You have reached the maximum units allowed (27)."); // Notify user
        } else {
            document.getElementById("addSubjectButton").disabled = false; // Enable the button if under limit
        }
    }

    // Array to hold existing subject schedules for conflict checking
    let existingSchedules = [];

    function convertTo12HourFormat(time) {
        const [hour, minute] = time.split(":");
        let hour12 = (hour % 12) || 12; // Convert hour to 12-hour format; '0' is replaced with '12'
        let period = hour >= 12 ? "PM" : "AM";
        return `${hour12}:${minute} ${period}`;
    }

    async function addSubject() {
        var edpCode = document.getElementById("edpCode").value;
        var subjectCode = document.getElementById("subjectCode").value;
        var studentName = document.getElementById("studentName").value;
        var studentId = document.getElementById("studentId").value;

        // Checks if there's a student
        if (!studentName) {
            showModal("Please input the student's ID first.");
            return;
        }

        if (edpCode && subjectCode) {
            // Check if the EDP code already exists in the table
            if (isEdpCodeExists(edpCode)) {
                showModal("This subject already exists. Please check the EDP code.");
                return; // Exit the function if EDP code exists
            }

            try {
                // Fetch subject details from the server, including SubjMaxStuds
                const response = await fetch(`/Enrollment/GetSubjectDetails?edpCode=${edpCode}&subjectCode=${subjectCode}`);
                const data = await response.json();

                if (data.success) {
                    // Check if SubjMaxStuds is greater than 0
                    if (data.subjMaxStuds <= 0) {
                        showModal("This subject has no available spots for enrollment.");
                        return; // Exit the function if no spots are available
                    }

                    // Convert military time to 12-hour format
                    var timeStart = data.timeStart;
                    var timeEnd = data.timeEnd;
                    var days = data.days;

                    // Check for schedule conflicts only if there are existing schedules
                    if (checkScheduleConflict(days, timeStart, timeEnd)) {
                        showModal(`CONFLICT IN SCHEDULE DETECTED!`); // Simplified conflict message
                        return;
                    }

                    // If no conflicts, proceed
                    var units = data.units;
                    var tableBody = document.getElementById("subjectTableBody");

                    // Create a new row
                    var row = document.createElement("tr");
                    row.setAttribute('data-edpCode', edpCode);  // Add this to the row element

                    row.innerHTML = `
                        <td>${edpCode}</td>
                        <td>${subjectCode}</td>
                        <td>${days}</td>
                        <td>${convertTo12HourFormat(timeStart)}</td>
                        <td>${convertTo12HourFormat(timeEnd)}</td>
                        <td>${units}</td>
                        <td>
                            <input class="btn btn-danger ms-1" id="deleteButton" onclick="deleteRow(this, ${studentId}, '${edpCode}')" value="Delete">
                        </td>
                    `;
                    // Append the row to the table
                    tableBody.appendChild(row);

                    // Update the existing schedules
                    existingSchedules.push({ edpCode, subjectCode, days, timeStart, timeEnd });

                    // Clear input fields after adding the row
                    document.getElementById("edpCode").value = "";
                    document.getElementById("subjectCode").value = "";

                    // Calculates Total Units
                    calculateTotalUnits();

                    // Call the backend POST method to add enrollment details
                    await addEnrollmentDetailsToDatabase(edpCode, subjectCode, units, studentId);

                } else {
                    showModal("Subject details could not be retrieved. Please check the EDP code and subject code.");
                }
            } catch (error) {
                console.error("Error fetching subject details:", error);
            }
        } else {
            showModal("Please enter EDP code.");
        }
    }


    // Function to call the backend POST method and add enrollment details
    async function addEnrollmentDetailsToDatabase(edpCode, subjectCode, units, studentId) {
        try {
            // Prepare the data for the POST request
            const requestData = {
                SubjectEDPCode: edpCode,
                SubjectCode: subjectCode,
                SubjectUnits: units,
                StudentId: studentId // Passing the StudentId instead of StudentName
            };

            // Send the POST request to the server
            const response = await fetch('/Enrollment/AddEnrollmentDetails', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestData)
            });

            const data = await response.json();

            if (data.success) {
                // Success message or any other UI updates you need to handle
                console.log("Enrollment details added successfully.");
            } else {
                showModal("Failed to add enrollment details.");
            }
        } catch (error) {
            console.error("Error adding enrollment details:", error);
        }
    }

    function isEdpCodeExists(edpCode) {
        // Get all rows in the subject table
        var tableBody = document.getElementById("subjectTableBody");
        var rows = tableBody.getElementsByTagName("tr");

        // Loop through rows and check for existing EDP code
        for (var i = 0; i < rows.length; i++) {
            var cells = rows[i].getElementsByTagName("td");
            if (cells[0] && cells[0].innerText === edpCode) {
                return true; // EDP code exists
            }
        }
        return false; // EDP code does not exist
    }

    function checkScheduleConflict(newDays, newTimeStart, newTimeEnd) {
        console.log("Checking conflict for:", newDays, newTimeStart, newTimeEnd);
        const start1 = convertTimeToMinutes(newTimeStart);
        const end1 = convertTimeToMinutes(newTimeEnd);
        const newDaysArray = newDays.split("").map(day => day.trim());

        // Loop through existing schedules
        for (let schedule of existingSchedules) {
            const scheduleDaysArray = schedule.days.split("").map(day => day.trim());
            const hasCommonDay = scheduleDaysArray.some(day => newDaysArray.includes(day));

            if (hasCommonDay) {
                const start2 = convertTimeToMinutes(schedule.timeStart);
                const end2 = convertTimeToMinutes(schedule.timeEnd);

                // Check for overlaps
                console.log(`Comparing: [${start1}, ${end1}] with [${start2}, ${end2}]`);
                if (start1 < end2 && end1 > start2) {
                    console.log("Conflict detected!");
                    return true; // Conflict found
                }
            }
        }
        console.log("No conflicts detected.");
        return false; // No conflicts
    }

    function convertTimeToMinutes(time) {
        const [hour, minute] = time.split(":").map(Number);
        return hour * 60 + minute; // Convert to total minutes
    }

    function getConflictDetails(newDays, newTimeStart, newTimeEnd) {
        let details = [];
        for (let schedule of existingSchedules) {
            // Check if days overlap
            if (schedule.days === newDays) {
                const start2 = convertTimeToMinutes(schedule.timeStart);
                const end2 = convertTimeToMinutes(schedule.timeEnd);
                const start1 = convertTimeToMinutes(newTimeStart);
                const end1 = convertTimeToMinutes(newTimeEnd);

                // Check for overlaps
                if (start1 < end2 && end1 > start2) {
                    details.push(`${schedule.subjectCode}'s schedule ${schedule.days} ${convertTo12HourFormat(schedule.timeStart)} - ${convertTo12HourFormat(schedule.timeEnd)}`);
                }
            }
        }
        return details.length > 0 ? details.join("\n") : "No conflicts detected."; // Change this line to fit your needs
    }


    function showModal(message) {
        document.getElementById("modalMessage").innerText = message; // Set the message
        document.getElementById("notificationModal").style.display = "block"; // Show the modal
    }

    function closeModal() {
        document.getElementById("notificationModal").style.display = "none"; // Hide the modal
    }
    function deleteRow(button, studentId, edpCode) {
        // Get the row containing the delete button
        var row = button.closest("tr"); // Using closest to find the <tr> (table row)

        // Confirm the deletion
        if (confirm("Are you sure you want to delete this subject?")) {
            // Make AJAX request to the RemoveSubject action
            $.ajax({
                url: '/Enrollment/RemoveSubject',  // Your action's URL
                type: 'POST',
                data: {
                    studentId: studentId,  // Send studentId
                    edpCode: edpCode       // Send edpCode
                },
                success: function (response) {
                    if (response.success) {
                        // On success, remove the row from the table (UI update)
                        if (row) {
                            row.remove();  // Removes the row from the table
                        }

                        // Remove the corresponding entry from existingSchedules (assuming it's available)
                        existingSchedules = existingSchedules.filter(schedule => schedule.edpCode !== edpCode);

                        // Recalculate total units after removal
                        calculateTotalUnits();
                    } else {
                        alert('Error: ' + response.message);
                    }
                },
                error: function () {
                    alert('An error occurred while deleting the subject.');
                }
            });
        }
    }
</script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        fetchSubjectScheduleList();
    });

    async function fetchSubjectScheduleList() {
        try {
            const response = await fetch('/Enrollment/GetSubjectScheduleList');
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();

            // Log data to confirm it's what you expect
            console.log('Data received from server:', data);

            const tableBody = document.querySelector('#subjectScheduleTable tbody');
            if (!tableBody) {
                console.error("Table body element not found!");
                return;
            }

            tableBody.innerHTML = ''; // Clear existing rows

            if (data.success) {
                data.subjectSchedules.forEach(schedule => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                            <td>${schedule.edpCode}</td>
                            <td>${schedule.code}</td>
                            <td>${schedule.days}</td>
                            <td>${convertTo12HourFormat(schedule.timeStart)}</td>
                            <td>${convertTo12HourFormat(schedule.timeEnd)}</td>
                        `;
                    tableBody.appendChild(row);
                });
            } else {
                alert(data.message); // Handle no records found
            }
        } catch (error) {
            console.error('Error fetching subject schedule list:', error);
            alert('An error occurred while fetching the subject schedules. Please try again later.');
        }
    }
</script>

<script>
    // Function to open the modal
    function openModal(message) {
        document.getElementById('modalMessage').textContent = message;
        document.getElementById('notificationModal').style.display = 'block';
    }

    // Function to close the modal
    function closeModal() {
        document.getElementById('notificationModal').style.display = 'none';
    }

    // Check if total units are set when trying to submit
    document.getElementById('enrolledButton').addEventListener('click', function (event) {
        var totalUnits = document.getElementById('totalUnits').value;

        if (!totalUnits || totalUnits.trim() === '') {
            event.preventDefault();  // Prevent form submission
            openModal("Add subjects first");
        }
    });

    // Function to check if student is already enrolled
    async function checkStudentEnrollment(studentId) {
        try {
            const response = await fetch(`/Enrollment/IsStudentEnrolled?studentId=${studentId}`);
            const data = await response.json();

            if (data.isEnrolled) {
                // If student is already enrolled, hide the enrolledButton and addSubjectButton
                document.getElementById('enrolledButton').style.display = 'none';
                document.getElementById('addSubjectButton').style.display = 'none';

                // Show modal with "Student already enrolled" message
                showModal("Student already enrolled");
            }
            else {
                // If student is not enrolled, make sure the button is visible
                document.getElementById('enrolledButton').style.display = 'block';
                document.getElementById('addSubjectButton').style.display = 'block';
            }
        } catch (error) {
            console.error("Error checking student enrollment:", error);
        }

        function showModal(message) {
            const modal = document.getElementById('notificationModal'); // The modal element
            const modalMessage = document.getElementById('modalMessage'); // The element inside the modal to display the message
            modalMessage.textContent = message;  // Set the message in the modal
            modal.style.display = 'block';  // Show the modal
        }

        function closeModal() {
            const modal = document.getElementById('notificationModal');
            modal.style.display = 'none';  // Hide the modal when close is clicked
        }
    }

    // Call the function when the studentId input changes
    document.getElementById("studentId").addEventListener("change", function () {
        const studentId = this.value;  // Get the studentId from the input field
        if (studentId) {
            checkStudentEnrollment(studentId);  // Check if the student is already enrolled
        }
    });

</script>

